<?phpnamespace App\Api;class Curl{	public static $proxy = false;	public static $cookie = "temp/cookie.txt";	public static $user_agent = 'Mozilla/5.0 (Windows NT 5.1; rv:35.0) Gecko/20100101 Firefox/14.0';	public static $last_url;	public static $ch;	public static $last_http_code;	public static $verbose = false;	public static $timeout = 30;		public static function SetCookieFile($cookie_f)	{            if($cookie_f)            {                if(!file_exists($cookie_f))                {                    $ft = fopen($cookie_f, "w+");                    fclose($ft);                }                self::$cookie = realpath($cookie_f);            }            else self::$cookie = false;	}		public static function SetUserAgent($user_agent_1)	{		self::$user_agent = $user_agent_1;		//Curl::Start();	}		public static function Start()	{		self::$ch = curl_init();	}		function NewSession()	{		self::$cookie = rand() . '.txt';		self::$ch = curl_init();	}		public static function UseProxy($proxy_obj)	{		self::$proxy = $proxy_obj;	}		static function OpenPage($url, $headers = array(), $cookies = false, $location = true, $header = false)	{		if(self::$proxy)		{			curl_setopt(self::$ch, CURLOPT_PROXY, self::$proxy['host']);						if(!empty(self::$proxy['auth']))			{				curl_setopt(self::$ch, CURLOPT_PROXYUSERPWD, self::$proxy['auth']);			}		}				curl_setopt(self::$ch, CURLOPT_URL, $url);		curl_setopt(self::$ch, CURLOPT_VERBOSE, self::$verbose); 		curl_setopt(self::$ch, CURLOPT_ENCODING, "");		curl_setopt(self::$ch, CURLOPT_POST, 0);		curl_setopt(self::$ch, CURLOPT_USERAGENT, self::$user_agent);		curl_setopt(self::$ch, CURLOPT_COOKIEFILE, self::$cookie);		curl_setopt(self::$ch, CURLOPT_COOKIEJAR, self::$cookie);		curl_setopt(self::$ch, CURLOPT_RETURNTRANSFER, 1);		curl_setopt(self::$ch, CURLOPT_FAILONERROR, 0);		curl_setopt(self::$ch, CURLOPT_FOLLOWLOCATION, $location);		curl_setopt(self::$ch, CURLOPT_HEADER, $header);		//curl_setopt(self::$ch, CURLOPT_REFERER, $referer);		curl_setopt(self::$ch, CURLOPT_CONNECTTIMEOUT, static::$timeout);		curl_setopt(self::$ch, CURLOPT_TIMEOUT, static::$timeout);		curl_setopt(self::$ch, CURLOPT_SSL_VERIFYPEER, 0);		curl_setopt(self::$ch, CURLOPT_SSL_VERIFYHOST, 0);				if($cookies) curl_setopt(self::$ch, CURLOPT_COOKIE, $cookies);				curl_setopt(self::$ch, CURLOPT_HTTPHEADER, $headers);				$rez = curl_exec(self::$ch);				self::$last_http_code = curl_getinfo(self::$ch, CURLINFO_HTTP_CODE);				/*		if(CURL_DEBUG == true)		{			print_r(curl_getinfo(self::$ch));			print_r(curl_error(self::$ch));		}		*/		self::$last_url = curl_getinfo(self::$ch, CURLINFO_EFFECTIVE_URL);				if(empty($rez)) return false;				return $rez;	}		static function OpenPageWithPost($url, $post, $headers = array(), $location = true, $header = false)	{		if(self::$proxy)		{			curl_setopt(self::$ch, CURLOPT_PROXY, self::$proxy['host']);						if(!empty(self::$proxy['auth']))			{				curl_setopt(self::$ch, CURLOPT_PROXYUSERPWD, self::$proxy['auth']);			}		}				curl_setopt(self::$ch, CURLOPT_URL, $url);		curl_setopt(self::$ch, CURLOPT_VERBOSE, self::$verbose); 		curl_setopt(self::$ch, CURLOPT_ENCODING, "");		curl_setopt(self::$ch, CURLOPT_POST, 1);		curl_setopt(self::$ch, CURLOPT_POSTFIELDS, $post);		curl_setopt(self::$ch, CURLOPT_USERAGENT, self::$user_agent);		curl_setopt(self::$ch, CURLOPT_COOKIEFILE, self::$cookie);		curl_setopt(self::$ch, CURLOPT_COOKIEJAR, self::$cookie);		curl_setopt(self::$ch, CURLOPT_RETURNTRANSFER, 1);		curl_setopt(self::$ch, CURLOPT_FAILONERROR, 0);		curl_setopt(self::$ch, CURLOPT_HEADER, $header);		curl_setopt(self::$ch, CURLOPT_HTTPHEADER, $headers);		curl_setopt(self::$ch, CURLOPT_CONNECTTIMEOUT, static::$timeout);		curl_setopt(self::$ch, CURLOPT_TIMEOUT, static::$timeout);		curl_setopt(self::$ch, CURLOPT_SSL_VERIFYPEER, 0);		curl_setopt(self::$ch, CURLOPT_SSL_VERIFYHOST, 0);		curl_setopt(self::$ch, CURLOPT_FOLLOWLOCATION, $location);				$rez = curl_exec(self::$ch);				self::$last_http_code = curl_getinfo(self::$ch, CURLINFO_HTTP_CODE);				/*		if(CURL_DEBUG == true)		{			print_r(curl_getinfo(self::$ch));			print_r(curl_error(self::$ch));		}		*/		self::$last_url = curl_getinfo(self::$ch, CURLINFO_EFFECTIVE_URL);				if(empty($rez)) return false;				return $rez;	}		static function PostQuery($url, $data, $headers = array(), $location = true, $header = false)	{		if(self::$proxy)		{			curl_setopt(self::$ch, CURLOPT_PROXY, self::$proxy['host']);						if(!empty(self::$proxy['auth']))			{				curl_setopt(self::$ch, CURLOPT_PROXYUSERPWD, self::$proxy['auth']);			}		}        curl_setopt(self::$ch, CURLOPT_VERBOSE, self::$verbose);        curl_setopt(self::$ch, CURLOPT_URL, $url);		curl_setopt(self::$ch, CURLOPT_HEADER, $header);		curl_setopt(self::$ch, CURLOPT_POST, 1);		curl_setopt(self::$ch, CURLOPT_RETURNTRANSFER, 1);		curl_setopt(self::$ch, CURLOPT_FOLLOWLOCATION, $location); 		curl_setopt(self::$ch, CURLOPT_POSTFIELDS, $data);		curl_setopt(self::$ch, CURLOPT_SSL_VERIFYPEER, 0);		curl_setopt(self::$ch, CURLOPT_CONNECTTIMEOUT, static::$timeout);		curl_setopt(self::$ch, CURLOPT_TIMEOUT, static::$timeout);		curl_setopt(self::$ch, CURLOPT_SSL_VERIFYHOST, 0);		curl_setopt(self::$ch, CURLOPT_USERAGENT, self::$user_agent);		curl_setopt(self::$ch, CURLOPT_COOKIEFILE, self::$cookie); 		curl_setopt(self::$ch, CURLOPT_COOKIEJAR, self::$cookie);		curl_setopt(self::$ch, CURLOPT_HTTPHEADER, $headers);				$res = curl_exec(self::$ch);				self::$last_http_code = curl_getinfo(self::$ch, CURLINFO_HTTP_CODE);				return $res;	}		function OpenPages($urls)  	{		$mh = curl_multi_init(); 		unset($conn);  		foreach ($urls as $i => $url)  		{  			$conn[$i]=curl_init(trim($url));  			curl_setopt($conn[$i],CURLOPT_RETURNTRANSFER, 1);  			curl_setopt($conn[$i],CURLOPT_TIMEOUT, static::$timeout);			curl_setopt($conn[$i],CURLOPT_USERAGENT, 'Mozilla/5.0 (compatible; Googlebot/2.1; +http://www.google.com/bot.html)');			curl_setopt($conn[$i], CURLOPT_COOKIEFILE, self::$cookie); 			curl_setopt($conn[$i], CURLOPT_COOKIEJAR, self::$cookie);			curl_setopt($conn[$i], CURLOPT_HEADER, 0);			curl_setopt($conn[$i], CURLOPT_FOLLOWLOCATION, 1); 			curl_multi_add_handle ($mh,$conn[$i]);  		}  		do { $n=curl_multi_exec($mh,$active); usleep(100); } while ($active);  				foreach ($urls as $i => $url)  		{  			$result[]=curl_multi_getcontent($conn[$i]);  			curl_close($conn[$i]);  		}				curl_multi_close($mh);  				return $result;	}		static function Close()	{		curl_close(self::$ch);	}}?>